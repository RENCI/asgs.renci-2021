#!/bin/bash
#------------------------------------------------------------------------
# opendap_post_[% postType %].sh : Copies files to remote OPeNDAP server.
# Generated by opendap_post_gen.pl.
#------------------------------------------------------------------------
# Copyright(C) 2022 Jason Fleming
#
# This file is part of the ADCIRC Surge Guidance System (ASGS).
#
# The ASGS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ASGS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the ASGS.  If not, see <http://www.gnu.org/licenses/>.
#------------------------------------------------------------------------
#-------------------------------------------------------------
# D E V E L O P M E N T   N O T E S
#-------------------------------------------------------------
# + Initialization (i.e., advisory=0) should set CYCLE equal
#   to COLDSTARTDATE
#-------------------------------------------------------------
THIS=$(basename -- $0)
#
# reliability settings
timeoutRetryLimit=${timeoutRetryLimit:-5} # FIXME: hardcoded to 5; make this more granular
serverAliveInterval=${serverAliveInterval:-10}
# executables
SCRIPTDIR=[%+ paths.scriptDir +%]
# logging
SYSLOG=[%+ monitoring.logging.system +%]
CYCLELOG=[%+ monitoring.logging.cycle +%]
SCENARIOLOG=[%+ monitoring.logging.scenario +%]
source $SCRIPTDIR/monitoring/logging.sh
# state
SCENARIO=[%+ forcing.scenario +%]
CYCLE=[%+ forcing.cycle +%]
#
# list of files to be posted
FILES=( [% opendapFiles.join %] )
if [[ ${#FILES[@]} -eq 0 ]]; then
   warn "cycle $CYCLE: $SCENARIO: $THIS: No files listed."
   exit
fi
#
# ****** load HPC platform yaml file
#
[% WHILE servers.$postType.size -%]
   [% SET server = servers.$postType.shift -%]
   server is [% server %]
   platforms.$server.threddsHost is [% platforms.$server.threddsHost %]


   allMessage "cycle $CYCLE: $SCENARIO: $THIS: Posting to opendap server [% server %]"
   # pick up config of the thredds data server where the files are to be posted
   scenarioMessage "Setting opendap server parameters."
   LINKABLEHOSTS=( [% platforms.$server.linkableHosts.join %] )
   COPYABLEHOSTS=( [% platforms.$server.copyableHosts.join %] )
   OPENDAPHOST=[% platforms.$server.opendapHost %]
   OPENDAPBASEDIR=[% platforms.$server.baseDir %]
   DOWNLOADPREFIX=[% platforms.$server.downloadPrefix %]
   CATLOGPREFIX=[% platforms.$server.catalogPrefix %]
   #
   # *********** load thredds server yaml file
   #
   #--------------------------------------------------------------------
   #  O P E N  D A P    P A T H   F O R M A T I O N
   #--------------------------------------------------------------------
[% IF postType == "default" -%]
   # default posting of full results to external server
   [%- IF forcing.backgroundMeteorology != "off" -%]
   # BACKGROUNDMET is not "off"
   STORMNAMEPATH=[% forcing.year %]/[% forcing.nwpModel %]
   [%- END -%]
   [%- IF forcing.tropicalCyclone == "on" AND forcing.scenario != "hindcast" -%]
   # TROPICALCYCLONE is set to "on"
   STORMNAMEPATH=[% forcing.year %]/[% forcing.basin %][% forcing.stormNumber %]
   ALTSTORMNAMEPATH=[% forcing.year %]/[% forcing.stormName.lower %]  # symbolic link with name
   [% END -%]
   [% IF forcing.scenario == "hindcast" -%]
       STORMNAMEPATH=[% forcing.year %]/initialize
   [% END -%]
   OPENDAPSUFFIX=[% forcing.cycle %]/$GRIDNAME/$HPCENV/$INSTANCENAME/$SCENARIO

[% END -%]

[% IF postType == "status" -%]
   # status posting of json status files to external server
   STORMNAMEPATH=[% forcing.year %]/status
   OPENDAPSUFFIX=[% hpc.env %]/[% instanceName -%]
   # update the url properties in the status json files before posting them
   # and save the url for keeping track of the previous url
   hookStatusURL=$DOWNLOADPREFIX/$STORMNAMEPATH/$OPENDAPSUFFIX/hook.status.json
   asgsInstanceStatusURL=$DOWNLOADPREFIX/$STORMNAMEPATH/$OPENDAPSUFFIX/asgs.instance.status.json
   cp -f hook.status.json tmp.hook.status.json
   awk -f $SCRIPTDIR/monitoring/replaceURL.awk -v u=\"$hookStatusURL\" -v i=\"$asgsInstanceStatusURL\" tmp.hook.status.json > hook.status.json
   rm tmp.hook.status.json
[% END -%]
   server is [% server.key %]
[% END -%]

   platforms.opendap.lsu_tds.threddsHost is [% platforms.opendap.$server.threddsHost %]


    if [[ $SCENARIO == "asgs.instance.status" ]]; then
       YEAR=${COLDSTARTDATE:0:4}
       STORMNAMEPATH=$YEAR/status
       OPENDAPSUFFIX=$HPCENV/$INSTANCENAME
       hookStatusURL=$DOWNLOADPREFIX/$STORMNAMEPATH/$OPENDAPSUFFIX/hook.status.json
       asgsInstanceStatusURL=$DOWNLOADPREFIX/$STORMNAMEPATH/$OPENDAPSUFFIX/asgs.instance.status.json

    else
       OPENDAPSUFFIX=$CYCLE/$GRIDNAME/$HPCENV/$INSTANCENAME/$SCENARIO
    fi
    echo "post.opendap.${server}.opendapsuffix : $OPENDAPSUFFIX" >> $RUNPROPERTIES 2>> $SYSLOG
    #
    # Create full path to results for server file sytem.
    # OPENDAPBASEDIR is specified in platforms.sh.
    OPENDAPDIR=$OPENDAPBASEDIR/$STORMNAMEPATH/$OPENDAPSUFFIX
    echo "post.opendap.${server}.opendapdir : $OPENDAPDIR" >> $RUNPROPERTIES 2>> $SYSLOG
    # create the opendap download url for the run.properties file
    downloadURL=$DOWNLOADPREFIX/$STORMNAMEPATH/$OPENDAPSUFFIX
    # add downloadurl or downloadurl_backup property to run.properties file
    if [[ ! `grep downloadurl $RUNPROPERTIES` =~ downloadurl ]]; then
       echo "downloadurl : $downloadURL" >> $RUNPROPERTIES 2>> ${SYSLOG}
    else
       backupNum=`grep downloadurl $RUNPROPERTIES | wc -l`
       echo "downloadurl_backup$backupNum : $downloadURL" >> $RUNPROPERTIES 2>> ${SYSLOG}
    fi


